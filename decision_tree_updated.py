# -*- coding: utf-8 -*-
"""Decision_tree_updated.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HsWsFC_XFAd-48hgCQSdsHeVBvS2X6zP
"""

# import pandas as pd
# import random

# # Create empty lists for each column
# student_names = []
# os_marks = []
# cn_marks = []
# dbms_marks = []
# dsa_marks=[]
# lr_marks=[]
# maths_marks=[]
# study_time=[]
# english_score=[]
# course_required = []

# # Generate 1000 rows of data
# for i in range(4000):
#     student_names.append(f'Student {i+1}')
#     os_marks.append(random.randint(50, 100))
#     cn_marks.append(random.randint(50, 100))
#     dbms_marks.append(random.randint(50, 100))
#     dsa_marks.append(random.randint(50, 100))
#     lr_marks.append(random.randint(50, 100))
#     maths_marks.append(random.randint(50,100))
#     study_time.append(random.randint(1,8))
#     english_score.append(random.randint(50,100))

# for i in range(4000):
#     marks=os_marks[i]+cn_marks[i]+dbms_marks[i]+dsa_marks[i]+lr_marks[i]+maths_marks[i]+english_score[i]
#     if(marks>525):
#         course_required.append(0)
#     else:
#         course_required.append(1)

# # Create a DataFrame
# data = {
#     'Student Name': student_names,
#     'Operating System': os_marks,
#     'Computer Networks': cn_marks,
#     'DBMS': dbms_marks,
#     'DSA': dsa_marks,
#     'LR': lr_marks,
#     'Maths': maths_marks,
#     'Study_Time': study_time,
#     'English_Score':english_score,
#     'Course Needed': course_required
# }

# df = pd.DataFrame(data)

# # Display the DataFrame
# print(df)

from google.colab import files
uploaded=files.upload()

import pandas as pd
df=pd.read_csv("student_dataset_95.csv")
df.head()

df=df.drop(columns='Student Name')

df.head()

inputs=df.drop('Course Needed',axis='columns')

target=df['Course Needed']

inputs

target

from sklearn import tree

model1=tree.DecisionTreeClassifier()

model1.fit(inputs,target)

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(inputs,target,test_size=0.3,random_state=2)

X_train
X_test

from sklearn.preprocessing import StandardScaler

Scaler=StandardScaler()

"""X_train_scaled=Scaler.fit_transform(X_train)
X_test_scaled=Scaler.transform(X_test)
X_train_scaled
X_test_scaled
"""

X_train_scaled=Scaler.fit_transform(X_train)
X_test_scaled=Scaler.transform(X_test)
X_train_scaled
X_test_scaled

#from sklearn import tree
from sklearn.naive_bayes import GaussianNB

#model=tree.DecisionTreeClassifier(max_depth=4)
model = GaussianNB()

model.fit(X_train_scaled,y_train)

model.predict(X_train_scaled)

"""Predictions in tabular format"""

predictions = model.predict(X_train_scaled)

prediction_table = X_train.copy()  # Copy the test data
prediction_table['Actual Course Needed'] = y_train  # Add the actual course needed
prediction_table['Predicted Course Needed'] = predictions

print(prediction_table)

"""Overall Performance of the model"""

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_train, predictions)
print(f'Accuracy: {accuracy:.4f}')

from sklearn.metrics import precision_score

precision = precision_score(y_train, predictions)
print(f'Precision: {precision:.4f}')

from sklearn.metrics import recall_score, f1_score

recall = recall_score(y_train, predictions)
print(f'Precision: {precision:.4f}')

f1 = f1_score(y_train, predictions)
print(f'Precision: {precision:.4f}')

performance_data = {
    'Metric': ['Accuracy', 'Precision', 'Recall', 'F1 Score'],
    'Value': [accuracy, precision, recall, f1]
}

performance_table = pd.DataFrame(performance_data)

print(performance_table)

"""Performance of the model using cross validation"""

from sklearn.model_selection import cross_val_score

scoring_metrics = ['accuracy', 'precision', 'recall', 'f1']

k = 5
performance_vector = {}

for metric in scoring_metrics:
    scores = cross_val_score(model, X_train_scaled, y_train, cv=k, scoring=metric)
    performance_vector[metric] = scores

performance_df = pd.DataFrame(performance_vector)

summary_statistics = performance_df.describe()

print("Performance Vector:")
print(performance_df)
print("\nSummary Statistics:")
print(summary_statistics)

model.score(X_train_scaled,y_train)

model.score(X_test_scaled,y_test)

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(12,6))
plot_tree(model1,filled=True)

plt.figure("Decision Tree",figsize=[20,10])
plot_tree(model1,fontsize=10,filled=True,max_depth=4)
plt.show()

importances=model1.feature_importances_

feature_names=["os_marks","cn_marks","dbms_marks","lr_marks","maths_marks","study_time","english_score"]

import numpy as np

plt.figure(figsize=(8,6))
plt.scatter(range(len(importances)),importances,c='blue')
plt.xticks(np.arange(len(importances)) )
plt.title("Feature Importances")
plt.show()

